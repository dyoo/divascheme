Implementation
--------------

The implementation of Distributed DivaScheme required us to make
substantial changes to the internals of the DivaScheme text editor;
these changes made it possible for DivaScheme to support collaborative
editing.  We also extended the WOOT algorithm from working directly on
character sequences to structured s-expressions, and extended the WOOT
theory to support the move operator.  We implemented a simple web
servlet to allow multiple clients to simultaneously send and receive
operations from the host machine.



DivaScheme overview
-------------------

## What is DivaScheme?

DivaScheme is a semi-structured text editor whose operations ensure
that the text buffer is structured according to the syntactic rules of
Scheme.  These operations include inserting and deleting whole
s-expressions and navigating through the s-expression trees.  As long
as the user stays within DivaScheme, the user can not leave the text
buffer in an unstructured state; i.e. parentheses are always balanced.


The editor has two modes of input:

    * Command mode

    * Insert mode

Command mode corresponds to the Command mode in a vi-style modal
editor.  A user may enter the Insert-Before or Insert-After commands
to go into DivaScheme's Insert mode.  Entering Insert Mode saves the
state of the buffer.  While in Insert Mode, the user is allowed to
enter a single symbol or edit an existing symbol.  Once the user exits
Insert mode, DivaScheme generates an operation based on the edit, and
applies that operation to the buffer's saved state from the beginning
of Insert mode.

We needed to make substantial changes to the DivaScheme core to
support the goals of this project.  Although DivaScheme advertised
itself as a structured text editor, internally, it did not maintain a
structured representation of the buffer, but rather kept a
unstructured representation of the buffer's character content.


DivaScheme applied an operation by:

   * parsing the contents of the screen to an abstract syntax tree
     (AST),

   * applying the operation on the buffer state, providing the AST as
     context to the operation, and

   * destroying the AST at the end of the operation's application.


This architecture was incompatible with the implementation of WOOT for
two main reasons:

    * The only thing that persisted between operations was the
      contents of the text buffer.  In order to support WOOT for
      s-expressions, the AST needed to persist across operations.


    * All the operations were state based.  They directly changed the
      contents of the text buffer, making it difficult to capture the
      operations we wanted to share across peers.  Directly related to
      this was a secondary problem: those changes were expressed in
      terms of unstructured changes to the text buffer, not in terms
      of structured operations on the AST.


We developed a syntax library called dsyntax to let us annotate
s-expressions with WOOT identifiers.  We incorporated an persistent
dsyntax AST structure into the DivaScheme world state.  This change
allowed us to keep track of s-expressions.  As an unorthodox design
decision, we treated whitespace and comments as significant elements
of the AST, as they too needed be sent across to other clients and
annotated with WOOT ids.

We made backend changes to the DivaScheme operation interpreter so
that the evaluation of operations were expressed in terms of
structured edits that are both (1) applied to the text buffer and (2)
stored away for later integration into WOOT.  We expressed the
interpretation of a DivaScheme operation in terms of two primitive
structured edits on the dsyntax AST:

   * Insert-Between: insert an element between two s-expressions

   * Delete: delete an existing s-expression

Some of the operations in DivaScheme move s-expresions around in the
AST.  Unfortunately, due to lack of time, we could not support Move as
a primitive structured edit; Move is currently implemented a
combination of the an Insert-Between and Delete structured edit.
Although our WOOT extensions support Move semantically, Distributed
DivaScheme doesn't emit Move as a single structured edit and does not
take full advantage of our WOOT implementation.  It is future work to
express Move as an primitive structured edit.







Extending WOOT
--------------

Extended the notion of the sentinel beginning and ending characters Sentinels to allow insertion into s-expressions.






Network
-------




etc. (we're still working on the implementation!)